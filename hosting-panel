# Struktura katalogów:
.
├── README.md
├── install.sh
├── requirements.txt
├── app/
│   ├── __init__.py
│   ├── config.py
│   ├── models.py
│   ├── routes/
│   │   ├── __init__.py
│   │   ├── admin.py
│   │   ├── auth.py
│   │   ├── domains.py
│   │   ├── databases.py
│   │   └── files.py
│   ├── static/
│   │   ├── css/
│   │   │   └── styles.css
│   │   └── js/
│   │       └── main.js
│   └── templates/
│       ├── base.html
│       ├── admin/
│       ├── auth/
│       └── dashboard/
├── scripts/
│   ├── backup.sh
│   └── ssl_renewal.sh
└── docker/
    ├── Dockerfile
    └── docker-compose.yml

# README.md
# Hosting Control Panel

A complete web hosting control panel similar to DirectAdmin/cPanel, built with Python Flask.

## Features

- Domain Management
- DNS Management
- Database Management (MySQL/PostgreSQL)
- File Manager
- SSL Certificate Management
- Email Accounts
- Backup System
- User Management
- Resource Monitoring

## Quick Installation

```bash
git clone https://github.com/yourusername/hosting-panel.git
cd hosting-panel
chmod +x install.sh
sudo ./install.sh
```

## Manual Installation

See [INSTALL.md](INSTALL.md) for detailed installation instructions.

## Requirements

- Ubuntu 20.04 or newer
- Python 3.8+
- MySQL 8.0+
- Nginx
- 2GB RAM minimum
- 20GB disk space minimum

## Configuration

1. Copy `.env.example` to `.env`
2. Update the configurations in `.env`
3. Run the setup script
4. Configure your domain DNS to point to your server
5. Install SSL certificate

## Security

This control panel implements several security measures:

- Two-factor authentication
- Rate limiting
- IP blocking
- SSL/TLS encryption
- Password hashing
- Regular security updates
- Backup system

## Contributing

1. Fork the repository
2. Create your feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## License

MIT License

# install.sh
#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Check if script is run as root
if [ "$EUID" -ne 0 ]; then 
    echo -e "${RED}Please run as root${NC}"
    exit 1
fi

# System update
echo -e "${GREEN}Updating system...${NC}"
apt update && apt upgrade -y

# Install required packages
echo -e "${GREEN}Installing required packages...${NC}"
apt install -y python3 python3-pip python3-venv apache2 mysql-server \
    certbot python3-certbot-apache git supervisor nginx redis-server

# Configure MySQL
echo -e "${GREEN}Configuring MySQL...${NC}"
mysql_secure_installation

# Create application directory
echo -e "${GREEN}Creating application directory...${NC}"
mkdir -p /var/www/hosting-panel
cd /var/www/hosting-panel

# Set up Python virtual environment
echo -e "${GREEN}Setting up Python environment...${NC}"
python3 -m venv venv
source venv/bin/activate

# Install Python packages
echo -e "${GREEN}Installing Python packages...${NC}"
pip install -r requirements.txt

# Create directory structure
echo -e "${GREEN}Creating directory structure...${NC}"
mkdir -p {logs,backups/{files,databases},ssl,uploads}

# Configure Supervisor
echo -e "${GREEN}Configuring Supervisor...${NC}"
cat > /etc/supervisor/conf.d/hosting-panel.conf << EOF
[program:hosting-panel]
directory=/var/www/hosting-panel
command=/var/www/hosting-panel/venv/bin/gunicorn -w 4 -b 127.0.0.1:8000 app:app
user=www-data
autostart=true
autorestart=true
stderr_logfile=/var/www/hosting-panel/logs/gunicorn.err.log
stdout_logfile=/var/www/hosting-panel/logs/gunicorn.out.log
EOF

# Configure Nginx
echo -e "${GREEN}Configuring Nginx...${NC}"
cat > /etc/nginx/sites-available/hosting-panel << EOF
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /static {
        alias /var/www/hosting-panel/app/static;
    }

    location /uploads {
        alias /var/www/hosting-panel/uploads;
    }

    client_max_body_size 100M;
}
EOF

# Create symbolic link and remove default config
ln -s /etc/nginx/sites-available/hosting-panel /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# Set permissions
echo -e "${GREEN}Setting permissions...${NC}"
chown -R www-data:www-data /var/www/hosting-panel
chmod -R 755 /var/www/hosting-panel

# Create environment file
echo -e "${GREEN}Creating environment file...${NC}"
cat > /var/www/hosting-panel/.env << EOF
FLASK_APP=app.py
FLASK_ENV=production
SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_hex(16))')
DATABASE_URL=mysql://root:password@localhost/hosting_panel
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=your-email@gmail.com
MAIL_PASSWORD=your-app-password
BACKUP_PATH=/var/www/hosting-panel/backups
UPLOAD_PATH=/var/www/hosting-panel/uploads
SSL_PATH=/var/www/hosting-panel/ssl
EOF

# Restart services
echo -e "${GREEN}Restarting services...${NC}"
systemctl restart supervisor
systemctl restart nginx

# Configure firewall
echo -e "${GREEN}Configuring firewall...${NC}"
ufw allow 80/tcp
ufw allow 443/tcp
ufw allow 22/tcp
ufw enable

echo -e "${GREEN}Installation completed!${NC}"
echo -e "Next steps:"
echo -e "1. Edit /var/www/hosting-panel/.env with your configuration"
echo -e "2. Update 'your-domain.com' in Nginx configuration"
echo -e "3. Run: certbot --nginx to configure SSL"
echo -e "4. Restart Nginx: systemctl restart nginx"

# requirements.txt
flask==2.0.1
flask-sqlalchemy==2.5.1
flask-login==0.5.0
flask-mail==0.9.1
flask-limiter==1.4
mysql-connector-python==8.0.26
psutil==5.8.0
dnspython==2.1.0
pyotp==2.6.0
qrcode==7.3
cryptography==3.4.7
schedule==1.1.0
gunicorn==20.1.0
python-dotenv==0.19.0

# app/config.py
import os
from dotenv import load_dotenv

load_dotenv()

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY')
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # Mail settings
    MAIL_SERVER = os.getenv('MAIL_SERVER')
    MAIL_PORT = int(os.getenv('MAIL_PORT', 587))
    MAIL_USE_TLS = os.getenv('MAIL_USE_TLS', 'True') == 'True'
    MAIL_USERNAME = os.getenv('MAIL_USERNAME')
    MAIL_PASSWORD = os.getenv('MAIL_PASSWORD')
    
    # Paths
    BACKUP_PATH = os.getenv('BACKUP_PATH', '/var/www/hosting-panel/backups')
    UPLOAD_PATH = os.getenv('UPLOAD_PATH', '/var/www/hosting-panel/uploads')
    SSL_PATH = os.getenv('SSL_PATH', '/var/www/hosting-panel/ssl')
    
    # Security
    SESSION_COOKIE_SECURE = True
    REMEMBER_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    REMEMBER_COOKIE_HTTPONLY = True

# app/models.py
from app import db
from flask_login import UserMixin
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    is_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    domains = db.relationship('Domain', backref='owner', lazy=True)
    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Domain(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), unique=True, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(20), default='active')
    ssl_enabled = db.Column(db.Boolean, default=False)
    ssl_expiry = db.Column(db.DateTime)

class Database(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), unique=True, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    db_type = db.Column(db.String(20), default='mysql')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Backup(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    type = db.Column(db.String(20), nullable=False)
    status = db.Column(db.String(20), default='pending')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    path = db.Column(db.String(255))

# app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_mail import Mail
from app.config import Config

db = SQLAlchemy()
login_manager = LoginManager()
mail = Mail()

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    
    db.init_app(app)
    login_manager.init_app(app)
    mail.init_app(app)
    
    from app.routes import auth, admin, domains, databases, files
    app.register_blueprint(auth.bp)
    app.register_blueprint(admin.bp)
    app.register_blueprint(domains.bp)
    app.register_blueprint(databases.bp)
    app.register_blueprint(files.bp)
    
    return app

# Docker support
# Dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:8000", "app:create_app()"]

# docker-compose.yml
version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - FLASK_APP=app
      - FLASK_ENV=production
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
      
  db:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=your_root_password
      - MYSQL_DATABASE=hosting_panel
    volumes:
      - mysql_data:/var/lib/mysql
      
  redis:
    image: redis:6.2-alpine
    volumes:
      - redis_data:/data

volumes:
  mysql_data:
  redis_data:
